openapi: 3.0.0
info:
  contact:
    email: jacquetq@gmail.com
  description: |
    Bike Rest Api with Spring Boot
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Bike Api
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/QuentinJacquet/com.bike.api/1.0.0
tags:
- description: Access to bikes
  name: bike
- description: Everything about your rides
  name: ride
- description: Access to stations
  name: station
- description: Operations about user
  name: user
paths:
  /bike:
    get:
      operationId: getBikes
      parameters:
      - description: status of bikes
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - available
          - used
          - under repair
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bike'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Bike'
                type: array
          description: successful operation
        "405":
          description: Invalid input
      summary: get bikes according to filter
      tags:
      - bike
      x-accepts: application/json
      x-tags:
      - tag: bike
    post:
      operationId: addBike
      requestBody:
        $ref: '#/components/requestBodies/BikeArray'
      responses:
        "200":
          description: successful operation
        "405":
          description: Invalid input
      summary: Add new bikes
      tags:
      - bike
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: bike
  /bike/{bikeId}:
    delete:
      operationId: deleteBike
      parameters:
      - description: Bike id to delete
        explode: false
        in: path
        name: bikeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Succesful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Bike not found
      summary: Deletes a bike
      tags:
      - bike
      x-accepts: application/json
      x-tags:
      - tag: bike
    get:
      description: Returns a single bike
      operationId: getBikeById
      parameters:
      - description: ID of bike to return
        explode: false
        in: path
        name: bikeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bike'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Bike not found
      summary: Find bike by ID
      tags:
      - bike
      x-accepts: application/json
      x-tags:
      - tag: bike
  /bike/{bikeId}/uploadImage:
    post:
      operationId: uploadFile
      parameters:
      - description: ID of bike to update
        explode: false
        in: path
        name: bikeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          description: successful operation
      summary: uploads an image
      tags:
      - bike
      x-contentType: application/octet-stream
      x-accepts: application/json
      x-tags:
      - tag: bike
  /station:
    get:
      operationId: getStations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Station'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Station'
                type: array
          description: successful operation
      summary: Get all stations
      tags:
      - station
      x-accepts: application/json
      x-tags:
      - tag: station
    post:
      operationId: createStations
      requestBody:
        $ref: '#/components/requestBodies/StationArray'
      responses:
        "200":
          description: Succesful operation
        "405":
          description: Invalid input
      summary: Create stations
      tags:
      - station
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: station
  /station/{stationId}:
    delete:
      operationId: deleteStation
      parameters:
      - description: Station id to delete
        explode: false
        in: path
        name: stationId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Succesful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Station not found
      summary: Deletes a station
      tags:
      - station
      x-accepts: application/json
      x-tags:
      - tag: station
    get:
      description: Returns a single station
      operationId: getStationById
      parameters:
      - description: ID of station to return
        explode: false
        in: path
        name: stationId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
            application/xml:
              schema:
                $ref: '#/components/schemas/Station'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Station not found
      summary: Find station by ID
      tags:
      - station
      x-accepts: application/json
      x-tags:
      - tag: station
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
      summary: Create user
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/login:
    get:
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/logout:
    get:
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Succesful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    get:
      operationId: getUserByName
      parameters:
      - description: The name that needs to be fetched. Use user1 for testing.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /ride:
    get:
      operationId: getRides
      parameters:
      - description: ID of user
        explode: true
        in: query
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: filter rides by status
        explode: true
        in: query
        name: completed
        required: false
        schema:
          type: boolean
        style: form
      - description: filter rides begun after given date
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: filter rides ended before given date
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ride'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Ride'
                type: array
          description: successful operation
      summary: Get all rides
      tags:
      - ride
      x-accepts: application/json
      x-tags:
      - tag: ride
  /ride/start:
    post:
      operationId: startRide
      parameters:
      - description: ID of user
        explode: true
        in: query
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      - description: ID of station
        explode: true
        in: query
        name: stationId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      requestBody:
        $ref: '#/components/requestBodies/Ride'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ride'
          description: successful operation
        "405":
          description: Invalid input
      summary: start a new ride
      tags:
      - ride
      x-contentType: application/json
      x-accepts: application/json
      x-tags:
      - tag: ride
  /ride/{rideId}:
    delete:
      operationId: deleteRide
      parameters:
      - description: Ride id to delete
        explode: false
        in: path
        name: rideId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Ride not found
      summary: Deletes a ride
      tags:
      - ride
      x-accepts: application/json
      x-tags:
      - tag: ride
    get:
      description: Returns a single ride
      operationId: getRideById
      parameters:
      - description: ID of ride to return
        explode: false
        in: path
        name: rideId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ride'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Ride not found
      summary: Find ride by ID
      tags:
      - ride
      x-accepts: application/json
      x-tags:
      - tag: ride
  /ride/{rideId}/end:
    post:
      operationId: endRide
      parameters:
      - description: ID of ride to end
        explode: false
        in: path
        name: rideId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: ID of station
        explode: true
        in: query
        name: stationId
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Ride not found
      summary: End a ride
      tags:
      - ride
      x-accepts: application/json
      x-tags:
      - tag: ride
components:
  requestBodies:
    Ride:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ride'
        application/xml:
          schema:
            $ref: '#/components/schemas/Ride'
      description: Ride object that needs to be added
      required: true
    Bike:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bike'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bike'
      description: Bike object that needs to be added
      required: true
    BikeArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Bike'
            type: array
        application/xml:
          schema:
            items:
              $ref: '#/components/schemas/Bike'
            type: array
      description: List of bike object
      required: true
    Station:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Station'
        application/xml:
          schema:
            $ref: '#/components/schemas/Station'
      description: Station object that needs to be added
      required: true
    StationArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Station'
            type: array
      description: List of station object
      required: true
  schemas:
    Bike:
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        id: 0
        status: available
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        status:
          default: available
          description: bike status
          enum:
          - available
          - used
          - under repair
          readOnly: true
          type: string
        photoUrls:
          items:
            type: string
          type: array
          xml:
            name: photoUrl
            wrapped: true
      type: object
      xml:
        name: Bike
    Station:
      example:
        bikes:
        - bikes
        - bikes
        latitude: 6.0274563
        stationName: stationName
        id: 0
        longitude: 1.4658129
        capacity: 5
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        stationName:
          type: string
        latitude:
          format: float
          type: number
        longitude:
          format: float
          type: number
        capacity:
          description: capacity of station to accept bikes
          format: int32
          type: integer
        bikes:
          items:
            type: string
          type: array
          xml:
            name: bikeIds
            wrapped: true
      type: object
      xml:
        name: Station
    Ride:
      example:
        endDate: 2000-01-23T04:56:07.000+00:00
        endStationId: 5
        id: 0
        startStationId: 1
        complete: false
        userId: 6
        startDate: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        userId:
          format: int64
          type: integer
        startStationId:
          format: int64
          type: integer
        startDate:
          format: date-time
          type: string
        endStationId:
          format: int64
          type: integer
        endDate:
          format: date-time
          type: string
        complete:
          default: false
          type: boolean
      required:
      - startDate
      - startStationId
      - userId
      type: object
      xml:
        name: Ride
    User:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        userStatus:
          description: User Status
          format: int32
          type: integer
      type: object
      xml:
        name: User
