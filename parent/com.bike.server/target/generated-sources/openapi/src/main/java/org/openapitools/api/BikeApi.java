/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Bike;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-13T16:50:59.975086900+02:00[Europe/Paris]")
@Validated
@Api(value = "bike", description = "the bike API")
public interface BikeApi {

    /**
     * POST /bike : Add new bikes
     *
     * @param bike List of bike object (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Add new bikes", nickname = "addBike", notes = "", tags={ "bike", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/bike",
        consumes = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Void>> addBike(@ApiParam(value = "List of bike object" ,required=true )  @Valid @RequestBody Flux<Bike> bike, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /bike/{bikeId} : Deletes a bike
     *
     * @param bikeId Bike id to delete (required)
     * @return Succesful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Bike not found (status code 404)
     */
    @ApiOperation(value = "Deletes a bike", nickname = "deleteBike", notes = "", tags={ "bike", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Bike not found") })
    @DeleteMapping(
        value = "/bike/{bikeId}"
    )
    default Mono<ResponseEntity<Void>> deleteBike(@ApiParam(value = "Bike id to delete",required=true) @PathVariable("bikeId") Long bikeId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /bike/{bikeId} : Find bike by ID
     * Returns a single bike
     *
     * @param bikeId ID of bike to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Bike not found (status code 404)
     */
    @ApiOperation(value = "Find bike by ID", nickname = "getBikeById", notes = "Returns a single bike", response = Bike.class, tags={ "bike", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Bike.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Bike not found") })
    @GetMapping(
        value = "/bike/{bikeId}",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Bike>> getBikeById(@ApiParam(value = "ID of bike to return",required=true) @PathVariable("bikeId") Long bikeId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"id\" : 0, \"status\" : \"available\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Bike> <id>123456789</id> <status>aeiou</status> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> </Bike>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /bike : get bikes according to filter
     *
     * @param status status of bikes (optional)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "get bikes according to filter", nickname = "getBikes", notes = "", response = Bike.class, responseContainer = "List", tags={ "bike", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Bike.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @GetMapping(
        value = "/bike",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Flux<Bike>>> getBikes(@ApiParam(value = "status of bikes", allowableValues = "available, used, under repair") @Valid @RequestParam(value = "status", required = false) String status, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"id\" : 0, \"status\" : \"available\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Bike> <id>123456789</id> <status>aeiou</status> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> </Bike>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /bike/{bikeId}/uploadImage : uploads an image
     *
     * @param bikeId ID of bike to update (required)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "uploads an image", nickname = "uploadFile", notes = "", tags={ "bike", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @PostMapping(
        value = "/bike/{bikeId}/uploadImage",
        consumes = { "application/octet-stream" }
    )
    default Mono<ResponseEntity<Void>> uploadFile(@ApiParam(value = "ID of bike to update",required=true) @PathVariable("bikeId") Long bikeId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<org.springframework.web.multipart.MultipartFile> body, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
