/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import org.openapitools.model.Station;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-13T16:50:59.975086900+02:00[Europe/Paris]")
@Validated
@Api(value = "station", description = "the station API")
public interface StationApi {

    /**
     * POST /station : Create stations
     *
     * @param station List of station object (required)
     * @return Succesful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "Create stations", nickname = "createStations", notes = "", tags={ "station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful operation"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/station",
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> createStations(@ApiParam(value = "List of station object" ,required=true )  @Valid @RequestBody Flux<Station> station, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /station/{stationId} : Deletes a station
     *
     * @param stationId Station id to delete (required)
     * @return Succesful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Station not found (status code 404)
     */
    @ApiOperation(value = "Deletes a station", nickname = "deleteStation", notes = "", tags={ "station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Station not found") })
    @DeleteMapping(
        value = "/station/{stationId}"
    )
    default Mono<ResponseEntity<Void>> deleteStation(@ApiParam(value = "Station id to delete",required=true) @PathVariable("stationId") Long stationId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /station/{stationId} : Find station by ID
     * Returns a single station
     *
     * @param stationId ID of station to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Station not found (status code 404)
     */
    @ApiOperation(value = "Find station by ID", nickname = "getStationById", notes = "Returns a single station", response = Station.class, tags={ "station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Station.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Station not found") })
    @GetMapping(
        value = "/station/{stationId}",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Station>> getStationById(@ApiParam(value = "ID of station to return",required=true) @PathVariable("stationId") Long stationId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"bikes\" : [ \"bikes\", \"bikes\" ], \"latitude\" : 6.0274563, \"stationName\" : \"stationName\", \"id\" : 0, \"longitude\" : 1.4658129, \"capacity\" : 5 }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Station> <id>123456789</id> <stationName>aeiou</stationName> <latitude>1.3579</latitude> <longitude>1.3579</longitude> <capacity>123</capacity> <bikes> <bikes>aeiou</bikes> </bikes> </Station>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /station : Get all stations
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get all stations", nickname = "getStations", notes = "", response = Station.class, responseContainer = "List", tags={ "station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Station.class, responseContainer = "List") })
    @GetMapping(
        value = "/station",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Flux<Station>>> getStations(@ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"bikes\" : [ \"bikes\", \"bikes\" ], \"latitude\" : 6.0274563, \"stationName\" : \"stationName\", \"id\" : 0, \"longitude\" : 1.4658129, \"capacity\" : 5 }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Station> <id>123456789</id> <stationName>aeiou</stationName> <latitude>1.3579</latitude> <longitude>1.3579</longitude> <capacity>123</capacity> <bikes> <bikes>aeiou</bikes> </bikes> </Station>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
