/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.time.OffsetDateTime;
import org.openapitools.model.Ride;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-13T16:50:59.975086900+02:00[Europe/Paris]")
@Validated
@Api(value = "ride", description = "the ride API")
public interface RideApi {

    /**
     * DELETE /ride/{rideId} : Deletes a ride
     *
     * @param rideId Ride id to delete (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Ride not found (status code 404)
     */
    @ApiOperation(value = "Deletes a ride", nickname = "deleteRide", notes = "", tags={ "ride", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Ride not found") })
    @DeleteMapping(
        value = "/ride/{rideId}"
    )
    default Mono<ResponseEntity<Void>> deleteRide(@ApiParam(value = "Ride id to delete",required=true) @PathVariable("rideId") Long rideId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /ride/{rideId}/end : End a ride
     *
     * @param rideId ID of ride to end (required)
     * @param stationId ID of station (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Ride not found (status code 404)
     */
    @ApiOperation(value = "End a ride", nickname = "endRide", notes = "", tags={ "ride", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Ride not found") })
    @PostMapping(
        value = "/ride/{rideId}/end"
    )
    default Mono<ResponseEntity<Void>> endRide(@ApiParam(value = "ID of ride to end",required=true) @PathVariable("rideId") Long rideId,@NotNull @ApiParam(value = "ID of station", required = true) @Valid @RequestParam(value = "stationId", required = true) Long stationId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /ride/{rideId} : Find ride by ID
     * Returns a single ride
     *
     * @param rideId ID of ride to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Ride not found (status code 404)
     */
    @ApiOperation(value = "Find ride by ID", nickname = "getRideById", notes = "Returns a single ride", response = Ride.class, tags={ "ride", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Ride.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Ride not found") })
    @GetMapping(
        value = "/ride/{rideId}",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Ride>> getRideById(@ApiParam(value = "ID of ride to return",required=true) @PathVariable("rideId") Long rideId, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"endStationId\" : 5, \"id\" : 0, \"startStationId\" : 1, \"complete\" : false, \"userId\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Ride> <id>123456789</id> <userId>123456789</userId> <startStationId>123456789</startStationId> <startDate>2000-01-23T04:56:07.000Z</startDate> <endStationId>123456789</endStationId> <endDate>2000-01-23T04:56:07.000Z</endDate> <complete>true</complete> </Ride>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /ride : Get all rides
     *
     * @param userId ID of user (required)
     * @param completed filter rides by status (optional)
     * @param startDate filter rides begun after given date (optional)
     * @param endDate filter rides ended before given date (optional)
     * @return Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or successful operation (status code 200)
     */
    @ApiOperation(value = "Get all rides", nickname = "getRides", notes = "", response = Ride.class, responseContainer = "List", tags={ "ride", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "User not found"),
        @ApiResponse(code = 200, message = "successful operation", response = Ride.class, responseContainer = "List") })
    @GetMapping(
        value = "/ride",
        produces = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Flux<Ride>>> getRides(@NotNull @ApiParam(value = "ID of user", required = true) @Valid @RequestParam(value = "userId", required = true) Long userId,@ApiParam(value = "filter rides by status") @Valid @RequestParam(value = "completed", required = false) Boolean completed,@ApiParam(value = "filter rides begun after given date") @Valid @RequestParam(value = "startDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,@ApiParam(value = "filter rides ended before given date") @Valid @RequestParam(value = "endDate", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"endStationId\" : 5, \"id\" : 0, \"startStationId\" : 1, \"complete\" : false, \"userId\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Ride> <id>123456789</id> <userId>123456789</userId> <startStationId>123456789</startStationId> <startDate>2000-01-23T04:56:07.000Z</startDate> <endStationId>123456789</endStationId> <endDate>2000-01-23T04:56:07.000Z</endDate> <complete>true</complete> </Ride>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /ride/start : start a new ride
     *
     * @param userId ID of user (required)
     * @param stationId ID of station (required)
     * @param ride Ride object that needs to be added (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiOperation(value = "start a new ride", nickname = "startRide", notes = "", response = Ride.class, tags={ "ride", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Ride.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @PostMapping(
        value = "/ride/start",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml" }
    )
    default Mono<ResponseEntity<Ride>> startRide(@NotNull @ApiParam(value = "ID of user", required = true) @Valid @RequestParam(value = "userId", required = true) Long userId,@NotNull @ApiParam(value = "ID of station", required = true) @Valid @RequestParam(value = "stationId", required = true) Long stationId,@ApiParam(value = "Ride object that needs to be added" ,required=true )  @Valid @RequestBody Mono<Ride> ride, @ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"endStationId\" : 5, \"id\" : 0, \"startStationId\" : 1, \"complete\" : false, \"userId\" : 6, \"startDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                String exampleString = "<Ride> <id>123456789</id> <userId>123456789</userId> <startStationId>123456789</startStationId> <startDate>2000-01-23T04:56:07.000Z</startDate> <endStationId>123456789</endStationId> <endDate>2000-01-23T04:56:07.000Z</endDate> <complete>true</complete> </Ride>";
                result = ApiUtil.getExampleResponse(exchange, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
