openapi: 3.0.0
info:
  description: |
    Bike Rest Api with Spring Boot
  version: "1.0.0"
  title: Bike Api
  contact:
    email: jacquetq@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: bike
    description: Access to bikes
  - name: ride
    description: Everything about your rides
  - name: station
    description: Access to stations
  - name: user
    description: Operations about user
paths:
  /bike:
    post:
      tags:
        - bike
      summary: Add new bikes
      operationId: addBike
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/BikeArray'
    get:
      tags:
        - bike
      summary: get bikes according to filter
      operationId: getBikes
      parameters: 
        - name: status
          in: query
          description: status of bikes
          required: false
          schema:
            type: string
            enum:
            - available
            - used
            - 'under repair'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bike'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bike'
            
        '405':
          description: Invalid input
  '/bike/{bikeId}':
    get:
      tags:
        - bike
      summary: Find bike by ID
      description: Returns a single bike
      operationId: getBikeById
      parameters:
        - name: bikeId
          in: path
          description: ID of bike to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bike'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bike'
        '400':
          description: Invalid ID supplied
        '404':
          description: Bike not found
    delete:
      tags:
        - bike
      summary: Deletes a bike
      operationId: deleteBike
      parameters:
        - name: bikeId
          in: path
          description: Bike id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description:  Succesful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Bike not found
  
  '/bike/{bikeId}/uploadImage':
    post:
      tags:
        - bike
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: bikeId
          in: path
          description: ID of bike to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /station:
    post:
      tags:
        - station
      summary: Create stations
      operationId: createStations
      responses:
        '200':
          description: Succesful operation
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/StationArray'
    get:
      tags:
        - station
      summary: Get all stations
      operationId: getStations
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
  '/station/{stationId}':
    get:
      tags:
        - station
      summary: Find station by ID
      description: Returns a single station
      operationId: getStationById
      parameters:
        - name: stationId
          in: path
          description: ID of station to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
            application/xml:
              schema:
                $ref: '#/components/schemas/Station'
        '400':
          description: Invalid ID supplied
        '404':
          description: Station not found
    delete:
      tags:
        - station
      summary: Deletes a station
      operationId: deleteStation
      parameters:
        - name: stationId
          in: path
          description: Station id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Succesful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Station not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Succesful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/ride':
    get:
      tags: 
        - ride
      summary: Get all rides
      operationId: getRides
      parameters:
        - name: userId
          in: query
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
        - name: completed
          in: query
          description: filter rides by status
          required: false
          schema:
            type: boolean
        - name: startDate
          in: query
          description: filter rides begun after given date
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: filter rides ended before given date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '200': 
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ride'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ride'
  '/ride/start':
    post:
      tags:
        - ride
      summary: start a new ride
      operationId: startRide
      parameters:
        - name: userId
          in: query
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
        - name: stationId
          in: query
          description: ID of station
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ride'
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Ride'
  '/ride/{rideId}':
    get:
      tags:
        - ride
      summary: Find ride by ID
      description: Returns a single ride
      operationId: getRideById
      parameters:
        - name: rideId
          in: path
          description: ID of ride to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ride'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ride not found
    delete:
      tags:
        - ride
      summary: Deletes a ride
      operationId: deleteRide
      parameters:
        - name: rideId
          in: path
          description: Ride id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Ride not found
  '/ride/{rideId}/end':
    post:
      tags:
        - ride
      summary: End a ride
      operationId: endRide
      parameters:
        - name: rideId
          in: path
          description: ID of ride to end
          required: true
          schema:
            type: integer
            format: int64
        - name: stationId
          in: query
          description: ID of station
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Ride not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Bike:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        status:
          type: string
          description: bike status
          enum:
            - available
            - used
            - 'under repair'
          default: available
          readOnly: true
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
      xml:
        name: Bike
    Station:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        stationName:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        capacity:
          type: integer
          format: int32
          description: capacity of station to accept bikes
        bikes:
          type: array
          xml:
            name: bikeIds
            wrapped: true
          items:
            type: string
      xml:
        name: Station
    Ride:
      type: object
      required:
        - userId
        - startStationId
        - startDate
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        startStationId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endStationId:
          type: integer
          format: int64
        endDate:
          type: string
          format: date-time
        complete:
          type: boolean
          default: false
      xml:
        name: Ride
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
  requestBodies:
    Ride:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ride'
        application/xml:
          schema:
            $ref: '#/components/schemas/Ride'
      description: Ride object that needs to be added
      required: true
    Bike:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bike'
        application/xml:
          schema:
            $ref: '#/components/schemas/Bike'
      description: Bike object that needs to be added
      required: true
    BikeArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Bike'
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Bike'
      description: List of bike object
      required: true
    Station:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Station'
        application/xml:
          schema:
            $ref: '#/components/schemas/Station'
      description: Station object that needs to be added
      required: true
    StationArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Station'
      description: List of station object
      required: true
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/QuentinJacquet/com.bike.api/1.0.0